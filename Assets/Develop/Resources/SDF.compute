#pragma kernel SearchPixelCS

RWStructuredBuffer<float4> buffer;

cbuffer BilinearCB
{
	int3 target_uvw;
	int3 resolution;
	Texture3D<float4> tex3d;
};

inline float4 Bilinear3D(int3 uvw, float3 p)
{
	return	(1 - p.x) * (1 - p.y) * (1 - p.z) * tex3d[uvw] +
			p.x * (1 - p.y) * (1 - p.z) * tex3d[uvw + int3(1, 0, 0)] +
			p.y * (1 - p.z) * (1 - p.x) * tex3d[uvw + int3(0, 1, 0)] +
			p.z * (1 - p.x) * (1 - p.y) * tex3d[uvw + int3(0, 0, 1)] +
			p.x * p.y * (1 - p.z) * tex3d[uvw + int3(1, 1, 0)] +
			p.y * p.z * (1 - p.x) * tex3d[uvw + int3(0, 1, 1)] +
			p.z * p.x * (1 - p.y) * tex3d[uvw + int3(1, 0, 1)] +
			p.x * p.y * p.z * tex3d[uvw + int3(1, 1, 1)];
}

[numthreads(8,8,8)]
void SearchPixelCS(uint3 dispatchID : SV_DispatchThreadID)
{
	float3 texSize;
	tex3d.GetDimensions(texSize.x, texSize.y, texSize.z);
	float3 frac_uvw = float3(
		(float) dispatchID.x / (float) resolution.x,
		(float) dispatchID.y / (float) resolution.y,
		(float) dispatchID.z / (float) resolution.z);
	float4 pixelColor = Bilinear3D(target_uvw, frac_uvw);

	int id = dispatchID.x + dispatchID.y * resolution.x + dispatchID.z * resolution.x * resolution.y;
	
	buffer[id] = float4((float3) target_uvw + frac_uvw, pixelColor.x);
}
